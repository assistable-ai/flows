{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialElements","id","type","data","label","position","x","y","Flow","elements","setElements","useState","React","createElement","style","height","ReactFlow","onConnect","params","els","addEdge","MiniMap","Controls","Background","App","className","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"qSAIA,MAAMA,EAAkB,CACtB,CAAEC,GAAI,IAAKC,KAAM,QAASC,KAAM,CAAEC,MAAO,UAAYC,SAAU,CAAEC,EAAG,IAAKC,EAAG,IAC5E,CAAEN,GAAI,IAAKE,KAAM,CAAEC,MAAO,UAAYC,SAAU,CAAEC,EAAG,IAAKC,EAAG,MAC7D,CAAEN,GAAI,IAAKE,KAAM,CAAEC,MAAO,UAAYC,SAAU,CAAEC,EAAG,IAAKC,EAAG,OAGzDC,EAAOA,KACX,MAAOC,EAAUC,GAAeC,mBAASX,GAGzC,OACEY,IAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,MACpBH,IAAAC,cAACG,IAAS,CAACP,SAAUA,EAAUQ,UAJhBC,GAAWR,EAAaS,GAAQC,YAAQF,EAAQC,KAK7DP,IAAAC,cAACQ,IAAO,MACRT,IAAAC,cAACS,IAAQ,MACTV,IAAAC,cAACU,IAAU,SAcJC,MARf,WACE,OACEZ,IAAAC,cAAA,OAAKY,UAAU,OACbb,IAAAC,cAACL,EAAI,QChBIkB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5B,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAACW,EAAG,QAORE,M","file":"static/js/main.1b4914b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\nimport './App.css';\n\nconst initialElements = [\n  { id: '1', type: 'input', data: { label: 'Node 1' }, position: { x: 250, y: 5 } },\n  { id: '2', data: { label: 'Node 2' }, position: { x: 100, y: 100 } },\n  { id: '3', data: { label: 'Node 3' }, position: { x: 400, y: 100 } },\n];\n\nconst Flow = () => {\n  const [elements, setElements] = useState(initialElements);\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\n\n  return (\n    <div style={{ height: 500 }}>\n      <ReactFlow elements={elements} onConnect={onConnect}>\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Flow />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}